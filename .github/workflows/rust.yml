name: Rust

on:
  push:
    tags:
      - '*'

env:
  CARGO_TERM_COLOR: always
permissions:
  contents: write
defaults:
  run:
    # necessary for windows
    shell: bash

jobs:
  #  test:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v4
  #      - name: Init submodules
  #        uses: snickerbockers/submodules-init@v4
  #      - name: Cargo cache
  #        uses: actions/cache@v4
  #        with:
  #          path: |
  #            ~/.cargo/registry
  #            ./target
  #          key: test-cargo-registry
  #      - name: List
  #        run: find ./
  #      - name: Run tests
  #        run: cargo test --verbose

  build:
    strategy:
      fail-fast: false
      matrix:
        # 只编译主要平台：Linux AMD64、Linux ARM64、macOS ARM64
        include:
          - TARGET: x86_64-unknown-linux-musl # Linux AMD64
            OS: ubuntu-latest
            FEATURES: ring-cipher,wss
          - TARGET: aarch64-unknown-linux-musl # Linux ARM64
            OS: ubuntu-latest
            FEATURES: ring-cipher,wss
          - TARGET: aarch64-apple-darwin # macOS ARM64
            OS: macos-latest
            FEATURES: ring-cipher,wss
    # needs: test
    runs-on: ${{ matrix.OS }}
    env:
      NAME: vnt-cli # change with the name of your project
      TARGET: ${{ matrix.TARGET }}
      OS: ${{ matrix.OS }}
      FEATURES: ${{ matrix.FEATURES }}
    steps:
      - uses: actions/checkout@v4
      - name: Init submodules
        uses: snickerbockers/submodules-init@v4
      - name: Cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ./target
            /opt/musl_gcc
          key: build-cargo-registry-${{matrix.TARGET}}

      - name: List
        run: find ./
      - name: Install and configure dependencies
        run: |
          rustup set auto-self-update disable
          
          if [[ $OS =~ ^ubuntu.*$ ]]; then
            sudo apt-get update && sudo apt-get install clang llvm crossbuild-essential-arm64 musl-tools libboost-all-dev libc6-dev -y
            
            case $TARGET in 
              aarch64-unknown-linux-musl)
                MUSL_URI=aarch64-linux-musl-cross
                ;;
            esac
          
            if [  -n "$MUSL_URI" ]; then
              # 检查是否已经缓存了工具链
              if [ ! -d "/opt/musl_gcc/aarch64-linux-musl-cross" ]; then
                mkdir -p /opt/musl_gcc 
                echo "Downloading musl cross toolchain..."
                # 使用 curl 替代 wget，设置超时和重试
                curl -L --connect-timeout 30 --max-time 600 --retry 3 --retry-delay 5 \
                  -o /opt/musl_gcc/aarch64-linux-musl-cross.tgz \
                  https://github.com/firezone/musl-toolchains/releases/download/1/aarch64-linux-musl-cross.tgz
                
                echo "Extracting musl cross toolchain..."
                tar xf /opt/musl_gcc/aarch64-linux-musl-cross.tgz -C /opt/musl_gcc/
                rm /opt/musl_gcc/aarch64-linux-musl-cross.tgz
              else
                echo "Using cached musl cross toolchain"
              fi
              
              # 创建符号链接
              sudo ln -sf /opt/musl_gcc/aarch64-linux-musl-cross/bin/*gcc /usr/bin/
              
              # 验证工具链安装
              echo "Verifying musl cross toolchain installation..."
              which aarch64-linux-musl-gcc || echo "Warning: aarch64-linux-musl-gcc not found in PATH"
              ls -la /opt/musl_gcc/aarch64-linux-musl-cross/bin/ || echo "Warning: musl toolchain directory not found"
            fi
          fi
          
          rustup install 1.77
          rustup default 1.77
          rustup -V
          
          # 简化的交叉编译配置
          cat >>~/.cargo/config <<EOF
          [target.x86_64-unknown-linux-musl]
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
          [target.aarch64-unknown-linux-musl]
          linker = "aarch64-linux-musl-gcc"
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
          [target.aarch64-apple-darwin]
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]     
          EOF
      - name: Install rust target
        run: rustup target add $TARGET
      - name: Run build vn-link-cli
        run: cargo build --package vn-link-cli --release --verbose --target $TARGET --features $FEATURES
      - name: Run build vnt-cli
        run: cargo build --package vnt-cli --release --verbose --target $TARGET --features $FEATURES
      - name: List target
        run: find ./target
      - name: Compress
        run: |
          mkdir -p ./artifacts
          if [[ $GITHUB_REF_TYPE =~ ^tag$ ]]; then
            TAG=$GITHUB_REF_NAME
          else
            TAG=$GITHUB_SHA
          fi
          mv ./target/$TARGET/release/vnt-cli ./artifacts/vnt-cli
          mv ./target/$TARGET/release/vn-link-cli ./artifacts/vn-link-cli
          mv ./README ./artifacts/README.txt
          cd ./artifacts
          tar -czf vnt-$TARGET-$TAG.tar.gz *
          mkdir upload_file
          mv vnt-$TARGET-$TAG.tar.gz ./upload_file/
      - name: Archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: vnt-cli-${{ matrix.TARGET }}
          path: |
            ./artifacts/upload_file
  # deploys to github releases on tag
  deploy:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: List
        run: find ./artifacts
      - name: Release
        uses: svenstaro/upload-release-action@v4
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./artifacts/**/*.tar.gz
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
